import datetime as dt
import re
from io import BytesIO

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from boto3.dynamodb.conditions import Key, Attr
from docx import Document

from data import cfg
from data.config_ydb import table_temp, table_bl, table_banned_user
from keyboards import keyboard
from lexicon import reminders

router = Router()
router.message.filter(F.chat.type.in_({"private"}))

lang_name = {'black_list_org': '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
             'black_list_sotr': '–§.–ò.–û. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'}


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
@router.message(CommandStart() or Command(commands='help'))
async def send_welcome(message: Message):
    # This handler will be called when user sends `/start` or `/help` command
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –†–æ–±–æ-–∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã –ì–µ–æ–¥–µ–∑–∏—è_–†–∞–±–æ—Ç–∞ –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞!",
                        reply_markup=choice_keyboard(message.from_user.id))

@router.message(F.text == '–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã')
async def rules(message: Message):
    rules_msg = '–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:\n\n'
    rules_msg = rules_msg + '\n\n'.join(reminders.reminders)

    await message.answer(f'{rules_msg}\n\n{reminders.reminders_full[0]}\n\n'
                         f'–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å!')


# ~~~~~~~~~~~~~~~–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π~~~~~~~~~~~~~
# –ù–∞—á–∞–ª–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ "–î–æ–±–∞–≤–∏—Ç—å"
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏')
async def bl_add_start(message: Message):
    await message.answer('–ö–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º?',
                         reply_markup=keyboard.bl_add)


# –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data == 'cancel')
async def bl_add_cancel(call: CallbackQuery):
    try:
        table_temp.delete_item(
            Key={'id_user': call.from_user.id}
        )
        await call.message.edit_text('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await call.answer()
    except:
        print('Error')
        await call.message.edit_text('–ù—É –∏ –Ω–∞—Ö—É–π —Ç—ã —Å—é–¥–∞ —Ç—ã–∫–Ω—É–ª?')


# –í—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@router.callback_query(F.data.startswith('bl_add_'))
async def bl_add_choice(call: CallbackQuery):

    if call.data == 'bl_add_org':
        call_choice = '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é'
        bl_base = 'black_list_org'
    else:
        call_choice = '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
        bl_base = 'black_list_sotr'
    table_temp.put_item(
        Item={
            'id_user': call.from_user.id,
            'body': {
                'state': 'bl_name',
                'bl_base': bl_base,
                'date': dt.datetime.now().strftime('%Y%m%d%H%M'),
                'name': '',
                'contact': '',
                'comment': '',
                'done': False
            }
        })
    await call.answer()
    await call.message.edit_text(f'–û–ö. \n\n'
                                 f'–î–æ–±–∞–≤–ª—è–µ–º –≤ –ß.–°. {call_choice}.\n'
                                 f'–ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å:\n\n'
                                 f'{lang_name[bl_base]}:\n>> ‚úèÔ∏è\n'
                                 f'–ö–æ–Ω—Ç–∞–∫—Ç—ã (–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ):\n>> ‚úèÔ∏è\n'
                                 f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏—á–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è):\n>> ‚úèÔ∏è\n\n'
                                 f'–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —ç—Ç–∞–ø–µ '
                                 f'–ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.\n'
                                 f'üìù –ù–∞–ø–∏—à–∏ {lang_name[bl_base]} –∏–ª–∏ –Ω–∞–∂–º–∏ "‚õîÔ∏è–û—Ç–º–µ–Ω–∞".',
                                 reply_markup=keyboard.bl_add_cancel)


# –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è
def bl_add_name(message, state='bl_save'):
    table_temp.update_item(
        Key={
            'id_user': message.from_user.id
        },
        UpdateExpression="set body.state = :s, body.name = :n",
        ExpressionAttributeValues={
            ':s': state,
            ':n': message.text
        },
        ReturnValues="UPDATED_NEW"
    )
    return


# –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def bl_add_contact(message, state='bl_save'):
    table_temp.update_item(
        Key={
            'id_user': message.from_user.id
        },
        UpdateExpression="set body.state = :s, body.contact = :c",
        ExpressionAttributeValues={
            ':s': state,
            ':c': message.text
        },
        ReturnValues="UPDATED_NEW"
    )
    return


# –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
def bl_add_comment(message):
    table_temp.update_item(
        Key={
            'id_user': message.from_user.id
        },
        UpdateExpression="set body.state = :s, body.comment = :c, body.done = :d",
        ExpressionAttributeValues={
            ':s': 'bl_save',
            ':c': message.text,
            ':d': True

        },
        ReturnValues="UPDATED_NEW"
    )
    return

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏ —ç—Ç–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
@router.callback_query(F.data.startswith('bl_save_'))
async def bl_add_save(call: CallbackQuery):
    if call.data == 'bl_save_Save':
        response = table_temp.get_item(Key={'id_user': call.from_user.id})
        table_bl.put_item(
            Item={
                'from_user': response['Item']['id_user'],
                'date': response['Item']['body']['date'],
                'body': {
                    'bl_base': response['Item']['body']['bl_base'],
                    'name': response['Item']['body']['name'],
                    'contact': response['Item']['body']['contact'],
                    'comment': response['Item']['body']['comment']
                }
            }
        )
        await call.message.answer(text= f'–ó{call.message.text[7:-48]}\n\n'
                                                  f'‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ß.–°.',
                               reply_markup=choice_keyboard(call.from_user.id))
        try:
            await call.message.delete()
            table_temp.delete_item(
                Key={'id_user': call.from_user.id}
            )
        except:
            print("wtf?")
        await call.answer()
    else:
        text = call.message.text[:-47]
        await call.message.edit_text(f'{text}\n'
                                     f'‚úèÔ∏è–ß—Ç–æ –º–µ–Ω—è–µ–º?',
                                     reply_markup=keyboard.bl_add_edit)

# –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–æ—Å–∏–º—ã—Ö –≤ –ß.–°. –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data.startswith('bl_edit_'))
async def bl_add_edit(call: CallbackQuery):
    choise_text = ''
    if call.data == 'bl_edit_name':
        table_temp.update_item(
            Key={
                'id_user': call.from_user.id
            },
            UpdateExpression="set body.state = :s",
            ExpressionAttributeValues={
                ':s': 'bl_name'
            },
            ReturnValues="UPDATED_NEW"
        )
        choise_text = '–Ω–æ–≤–æ–µ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –§.–ò.–û.'
    elif call.data == 'bl_edit_contact':
        table_temp.update_item(
            Key={
                'id_user': call.from_user.id
            },
            UpdateExpression="set body.state = :s",
            ExpressionAttributeValues={
                ':s': 'bl_contact'
            },
            ReturnValues="UPDATED_NEW"
        )
        choise_text = '–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö.'
    elif call.data == 'bl_edit_comment':
        table_temp.update_item(
            Key={
                'id_user': call.from_user.id
            },
            UpdateExpression="set body.state = :s",
            ExpressionAttributeValues={
                ':s': 'bl_comment'
            },
            ReturnValues="UPDATED_NEW"
        )
        choise_text = '–Ω–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'
    await call.message.edit_text(f'–•–æ—Ä–æ—à–æ, –∏–∑–º–µ–Ω–∏–º. –ñ–¥—É –æ—Ç —Ç–µ–±—è {choise_text}')


# –ù–∞—á–∞–ª–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ "–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
@router.message(F.text.startswith('–ü–æ–∏—Å–∫'))
async def bl_search(message: Message):
    await message.answer('–ü–æ –∫–∞–∫–æ–π –±–∞–∑–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?',
                         reply_markup=keyboard.bl_search)

# –í—ã–±–æ—Ä –±–∞–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ß.–°.
@router.callback_query(F.data.startswith('black_list_'))
async def bl_search_list(call: CallbackQuery):
    if call.data == 'black_list_my':
        response = table_bl.query(
            KeyConditionExpression=Key('from_user').eq(call.from_user.id)
        )
        if len(response['Items']) != 0:
            await call.message.edit_text(f'–¢–≤–æ–∏ –∑–∞–ø–∏—Å–∏:')
            for msg in response['Items']:
                await call.message.answer(f"----------------------------------\n"
                                          f"{lang_name[msg['body']['bl_base']]}:\n"
                                          f"{msg['body']['name']}\n\n"
                                          f"–ö–æ–Ω—Ç–∞–∫—Ç—ã (–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ):\n"
                                          f"{msg['body']['contact']}\n\n"
                                          f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏—á–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è):\n"
                                          f"{msg['body']['comment']}\n\n"
                                          f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n"
                                          f"{str(dt.datetime.strptime(msg['date'], '%Y%m%d%H%M'))}\n\n",
                                          reply_markup=keyboard.bl_delete)

        else:
            await call.message.edit_text(f'–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
    else:
        await call.answer()
        chioce = ''
        table_temp.put_item(
            Item={
                'id_user': call.from_user.id,
                'body': {
                    'state': 'search',
                    'search_list': call.data
                }
            })
        if call.data == 'black_list_org':
            chioce = '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'
        elif call.data == 'black_list_sotr':
            chioce = '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
        await call.message.edit_text(f'–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ {chioce}.\n\n '
                                     f'–û—Ç–ø—Ä–∞–≤—å –∫–æ–≥–æ –∏—â–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏ "‚õîÔ∏è–û—Ç–º–µ–Ω–∞"',
                                     reply_markup=keyboard.bl_full_base)

# –ü–æ–∏—Å–∫ –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
async def black_list_scan(message, base):
    response_scan = table_bl.scan(
        FilterExpression=Attr('body.bl_base').eq(base)
    )
    result_scan = 0
    for item in response_scan['Items']:
        if item['body']['name'].lower().find(message.text.lower()) != -1:
            result_scan += 1
            key_del = ''
            markup = None
            if message.from_user.id in cfg.list_admin:
                key_del = f'*****\n' \
                          f'–ö–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:\n' \
                          f'DFBD*{item["from_user"]}*{item["date"]}\n\n'
                markup = keyboard.bl_delete_admin
            result_scan_item = f"{lang_name[item['body']['bl_base']]}:\n" \
                               f"{item['body']['name']}\n\n" \
                               f"–ö–æ–Ω—Ç–∞–∫—Ç—ã (–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ):\n" \
                               f"{item['body']['contact']}\n\n" \
                               f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏—á–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è):\n" \
                               f"{item['body']['comment']}\n\n" \
                               f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n" \
                               f"{str(dt.datetime.strptime(item['date'], '%Y%m%d%H%M'))}\n\n{key_del}"
            await message.answer(result_scan_item, reply_markup=markup)

    if result_scan != 0:
        await message.answer(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{message.text}" –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result_scan}',
                             reply_markup=choice_keyboard(message.from_user.id))
    else:
        await message.answer(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{message.text}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
                             reply_markup=choice_keyboard(message.from_user.id))

    try:
        table_temp.delete_item(
            Key={'id_user': message.from_user.id}
        )

    except:
        print("wtf?")
    return result_scan

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ß.–°. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.callback_query(F.data.startswith('bl_delete_'))
async def bl_delete_user(call: CallbackQuery):
    await call.answer()
    if call.data == 'bl_delete_user':
        data = call.message.text.split('–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:')[1]
        try:
            table_bl.delete_item(
                Key={'from_user': call.from_user.id,
                     'date': re.sub(r'\W', '', data)[:-2]}
            )
            await call.message.edit_text('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∑–∞ –±–∞–∑—ã')
        except:
            await call.message.edit_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
    elif call.data == 'bl_delete_admin' and call.from_user.id in cfg.list_admin:
        await call.message.edit_text(call.message.text, reply_markup=keyboard.dfbd_admin)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¢–•–¢ —Ñ–∞–π–ª–∞ —Å –ß.–°.
@router.callback_query(F.data == 'full_base')
async def file_send(call: CallbackQuery):
    await call.answer()
    base_scan = table_temp.query(KeyConditionExpression=Key('id_user').eq(call.from_user.id))
    if base_scan:
        scan = base_scan['Items'][0]['body']['search_list']
        response_scan = table_bl.scan(
            FilterExpression=Attr('body.bl_base').eq(scan)
        )
        choice = ''
        if scan == 'black_list_org':
            choice = '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'
        elif scan == 'black_list_sotr':
            choice = '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'

        document = Document()
        document.add_heading(f'–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ {choice}:\n\n')
        if call.from_user.id in cfg.list_admin:
            document.add_paragraph(
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –∑–∞–ø–∏—Å–µ–π:\n"
                "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å '–ö–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏' "
                "–Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å DFDB* "
                f"–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ë–æ—Ç—É_–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ({cfg.url_bot})\n\n"
            )
        for item in response_scan['Items']:
            key_del = ''
            if call.from_user.id in cfg.list_admin:
                key_del = f'*****\n' \
                          f'–ö–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:\n' \
                          f'DFBD*{item["from_user"]}*{item["date"]}\n\n'
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            document.add_heading('----------------------------------', level=1)
            document.add_paragraph(f"{lang_name[item['body']['bl_base']]}:")
            document.add_paragraph(f"{item['body']['name']}")

            document.add_paragraph("–ö–æ–Ω—Ç–∞–∫—Ç—ã (–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ):")
            document.add_paragraph(f"{item['body']['contact']}")

            document.add_paragraph("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏—á–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è):")
            document.add_paragraph(f"{item['body']['comment']}")

            document.add_paragraph("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
            document.add_paragraph(
                f"{str(dt.datetime.strptime(item['date'], '%Y%m%d%H%M'))}"
            )
            document.add_paragraph(key_del)


        file = BytesIO()
        file.name = f'full_base_{choice}.docx'
        document.save(file)
        file.seek(0)

        await call.message.edit_text(f'–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ {choice}:')
        document_file = BufferedInputFile(file.getvalue(), filename=file.name)
        await call.message.answer_document(document=document_file)

        try:
            table_temp.delete_item(
                Key={'id_user': call.from_user.id}
            )
        except:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    else:
        await call.message.edit_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.')


@router.message(F.text == '–£–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞')
async def baned_user(message: Message):
    response = table_banned_user.query(
        KeyConditionExpression=Key('id_user').eq(message.from_user.id)
    )
    if len(response['Items']) != 0:

        body = response['Items'][0]['body']

        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ '
                             f'{body["date"][:-6]} UTC:\n'
                             f'{body["message_text"]}\n\n'
                             f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n'
                             f'{body["comment"]}\n\n'
                             f'*–ü–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã.\n'
                             f'**–ï—Å–ª–∏ –Ω–µ –≤–∏–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –±–∞–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö, –ø–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
                             f'–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∞–º, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è (–Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ).')
    else:
        await message.answer('–Ø –Ω–µ –∑–Ω–∞—é. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø–æ–ø–∞–ª–∏ –≤ –±–∞–Ω –µ—â–µ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞.')


# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ –õ–°
@router.message()
async def private_dialog(message: Message):
    response = table_temp.query(KeyConditionExpression=Key('id_user').eq(message.from_user.id))
    if len(response['Items']) != 0:
        state = response['Items'][0]['body']['state']
        if state == 'search':
            await black_list_scan(message, response['Items'][0]['body']['search_list'])

        else:
            done = response['Items'][0]['body']['done']
            name = response['Items'][0]['body']['name']
            contact = response['Items'][0]['body']['contact']
            comment = response['Items'][0]['body']['comment']
            step_message = '–ü—Ä–æ–≤–µ—Ä—è–µ–º. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏ "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å".'
            step_button = keyboard.bl_add_save
            if state == 'bl_name':
                if not done:
                    bl_add_name(message, 'bl_contact')
                    step_message = 'üìù –ù–∞–ø–∏—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞–∂–º–∏ "‚õîÔ∏è–û—Ç–º–µ–Ω–∞".'
                    step_button = keyboard.bl_add_cancel
                else:
                    bl_add_name(message)
                name = message.text
            elif state == 'bl_contact':
                if not done:
                    bl_add_contact(message, 'bl_comment')
                    step_message = 'üìù –ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º –ª—É—á—à–µ. –ù—É –∏–ª–∏ –Ω–∞–∂–º–∏ "‚õîÔ∏è–û—Ç–º–µ–Ω–∞".'
                    step_button = keyboard.bl_add_cancel
                else:
                    bl_add_contact(message)
                contact = message.text
            elif state == 'bl_comment':
                bl_add_comment(message)
                comment = message.text
            await message.answer(f'–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n\n'
                                 f"{lang_name[response['Items'][0]['body']['bl_base']]}:\n"
                                 f">> {name}\n"
                                 f"–ö–æ–Ω—Ç–∞–∫—Ç—ã (–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ):\n"
                                 f">> {contact}\n"
                                 f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏—á–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è):\n"
                                 f">> {comment}\n\n"
                                 f"{step_message}", reply_markup=step_button)
    else:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç. –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                             reply_markup=choice_keyboard(message.from_user.id))



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞–º
def choice_keyboard(id_user):
    if id_user in cfg.list_admin:
        keyboard_answer = keyboard.keyboard_private_admin
    else:
        keyboard_answer = keyboard.keyboard_private
    return keyboard_answer
